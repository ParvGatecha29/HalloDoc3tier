@model HalloDocDAL.Model.ScheduleModel;
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor Accessor
@{
    ViewData["Title"] = "Scheduling";
    Layout = "_adminDash";
}
<style>



</style>
<div class="" id="schedulingDiv">
    <div class="row justify-content-between  ">
        <div class="">
            <div class="d-flex justify-content-between my-3 container">
                <div class="d-flex">
                    <span class="fs-2 text-muted fw-bold">New Request</span>
                </div>
                <div class="d-flex justify-content-end">
                    <button class="float-end my-4 btn btn-outline-info backBtn" onclick="location.href='@Url.Action("AdminDashboard","AdminDashboard")'">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16"
                             height="16" fill="currentColor" class="bi bi-chevron-left fw-medium mb-1" viewBox="0 0 16 16">
                            <path fill-rule="evenodd"
                                  d="M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0" />
                        </svg>Back
                    </button>
                </div>
            </div>
            <div class="container d-flex flex-column  shadow">
                <div class="row mb-0 py-2 pe-2 rounded-3">
                    <div class="d-lg-flex  justify-content-between pe-1 pt-3">
                        <div class="col-xl-3  col-lg-3 col-md-12 col-sm-12 col-xs-12 col-12">
                            <select class="form-select" aria-label="Default select example" id="regionselect">
                                <option value="0" selected>All Regions</option>
                                @foreach (var i in Model.regions)
                                {
                                    <option value="@i.Regionid">@i.Name</option>
                                }
                            </select>
                        </div>
                        <div class="mt-3">
                            <a class="btn btn-info rounded-2 p-2 text-white" id="providerOnCall">Provider On Call</a>
                            <a class="btn btn-info rounded-2 p-2 text-white" id="shiftForReview">Shift For Review</a>
                            <a data-bs-toggle="modal" data-bs-target="#createShiftModal" class="btn btn-info mx-1 p-2 text-white">
                                Add New Shift
                            </a>

                        </div>
                    </div>
                </div>

                <div class="row my-2 mb-5">
                    <div class="col-md-7 mt-2">
                        <div id="calendarTitle" class="calendar-current-date fs-4 fw-bolder"></div>
                        <div class="text-start my-3 calendar-navigation">
                            <span id="calendar-prev" class="btn btn-info text-white rounded-circle" onclick="calendar.prev()">❮</span>
                            <span class="mx-1">
                                <label for="datejump">
                                    <input type="date" id="datejump" hidden />
                                    <i class="bi bi-calendar-day-fill fs-3"></i>
                                </label>
                            </span>

                            <span id="calendar-next" class="btn btn-info text-white rounded-circle" onclick="calendar.next()">❯</span>
                        </div>
                    </div>
                    <div class="col-md-5 mt-3">
                        <div class="d-flex justify-content-end">
                            <div class="alert   mx-1 px-4" role="alert" style="background-color:#F4CAED">
                            </div>
                            <span class="mx-1">Pending Shifts</span>
                            <!-- Button trigger modal -->
                            <div class="alert alert-success mx-1 px-4" role="alert">
                            </div>
                            <span class="mx-1">Approved Shifts</span>

                        </div>
                        <div class="d-flex justify-content-end">
                            <div id="resourceTimelineDay" class="btn btn-outline-info viewbtn mx-2" onclick="changeview('resourceTimelineDay',this)">
                                Day
                            </div>
                            <!-- Button trigger modal -->
                            <div id="resourceTimelineWeek" class="btn btn-outline-info viewbtn mx-2" onclick="changeview('resourceTimelineWeek',this)">
                                Week
                            </div>
                            <div id="resourceTimelineWeek" class="btn btn-outline-info viewbtn mx-2" onclick="changeview('dayGridMonth',this)">
                                Month
                            </div>
                        </div>
                    </div>
                </div>
                <div id="calendar" class="" style="min-height:38vh">
                </div>
            </div>
        </div>
    </div>

</div>
<script src="https://cdn.jsdelivr.net/npm/fullcalendar-scheduler@6.1.11/index.global.min.js"></script>
<script>
    var calendar;
    function changeview(view,btnc) {
        var btn = document.querySelectorAll(".viewbtn");
        btn.forEach(function (btn) {
            btn.classList.remove("btn-info")
        })
        btnc.classList.add("btn-info")
        $.ajax({
            url: "/AdminDashboard/CurrentView",
            data: { view: view }
        })
        calendar.changeView(view);
        
    }
    document.addEventListener('DOMContentLoaded', function () {
        
        var view = "@Accessor.HttpContext.Session.GetString("view")";
        
        if(view!=null){
            $("#"+view).addClass("btn-info")
        }
        else{
            $("#resourceTimelineDay").addClass("btn-info")
        }
        

        var calendarEl = document.getElementById('calendar');
        var selectedRegion = $('#regionselect').val();

        getPhysicianShift(selectedRegion);

        function getPhysicianShift(region) {
            fetch('/AdminDashboard/GetPhysicianShift?region=' + region)
                .then(response => response.json())
                .then(data => {
                    const resources = data.map(physician => ({
                        id: physician.Physicianid,
                        title: physician.Firstname,
                        avatar: `<img src="~/documents/Physician/${physician.Physicianid}/photo.png" class="avatar" />`
                    }));

                    // Fetch events from the server
                    fetch('/AdminDashboard/GetEvents?region=' + region)
                        .then(response => response.json())
                        .then(data => {

                            const events = data.map(event => ({
                                id: event.id,
                                resourceId: event.resourceId,
                                title: event.title,
                                start: event.start,
                                end: event.end,
                                eventBackgroundColor: event.status == 0 ? '#e39de8' : '#32d97d',
                                color: event.status == 0 ? '#e39de8' : '#32d97d',
                                ShiftDetailId: event.ShiftDetailId,
                                region: event.region,
                                status: event.status
                            }));

                            initializeCalendar(resources, events);
                        })
                        .catch(error => console.log(error));
                })
                .catch(error => console.log(error));
        }
        function initializeCalendar(resources, events) {
            $('#regionselect').on('change', function () {
                const newRegion = $(this).val();
                getPhysicianShift(newRegion);
            });

            calendar = new FullCalendar.Calendar(calendarEl, {
                height: 'auto',
                resourceAreaWidth: '10%',
                schedulerLicenseKey: 'GPL-My-Project-Is-Open-Source',
                themeSystem: 'bootstrap5',
                headerToolbar: false,
                initialView: "@Accessor.HttpContext.Session.GetString("view")",
                eventMaxStack: 1,
                dayMaxEvents: 4,
                views: {
                    resourceTimelineDay: {
                        buttonText: 'Day',
                        slotLabelContent: function (slotInfo) {
                            var hours = slotInfo.date.getHours();
                            var meridiem = hours >= 12 ? 'P' : 'A';
                            hours = hours % 12 || 12;
                            return hours + meridiem;
                        }
                    },
                    resourceTimelineWeek: {
                        buttonText: 'Week',
                        slotDuration: { days: 1 },
                        slotLabelInterval: { days: 1 },
                        slotMinTime: '00:00:00',
                        slotMaxTime: '23:59:59',
                        // slotLabelFormat: {
                        //     omitWeekday: false,
                        //     weekday: 'short',
                        //     day: '2-digit',
                        //     omitCommas: true,
                        //     meridiem: 'short'
                        // },

                    },
                    resourceTimelineMonth: {
                        buttonText: 'Month'
                    },

                },
                datesSet: function (info) {
                    var title = info.view.title;
                    $("#calendarTitle").html(title);
                    if (calendar.view.type === 'resourceTimelineWeek') {
                        calendar.setOption('slotDuration', { days: 1 });

                    } else {
                        calendar.setOption('slotDuration', '01:00:00');
                    }
                },
                editable: true,
                resources: resources,
                events: events,
                // eventDidMount: function (event, element) {
                //     if (calendar.view.type == 'dayGridMonth') {
                //         console.log(element);
                //         // console.log(event);
                //         // var a = event.closest("a.fcevent");
                //         // a.forEach(function (eve) {

                //         //     eve.style.backgroundColor = event.backgroundColor;
                //         // })
                //     }
                //     return event;
                // },
                eventDrop: function (e) {

                    var shiftDetailId = e.event.extendedProps.ShiftDetailId // Assuming you have an input field with id 'shiftDetailId' in your modal
                    var startDate = formatDate(e.event.start);
                    var startTime = formatTime(e.event.start);
                    var endTime = formatTime(e.event.end);
                    $.ajax({
                        url: '/AdminDashboard/SaveShift',
                        type: 'POST',
                        data: {
                            shiftDetailId: shiftDetailId,
                            startDate: startDate,
                            startTime: startTime,
                            endTime: endTime
                        },
                        success: function (response) {
                            if (response.error) {
                                Swal.fire({
                                    title: "Oops...",
                                    text: "Slot not available",
                                    icon: "error",
                                    showConfirmButton: false,
                                    timer: 1500
                                });
                                calendar.removeAllEvents(); // Remove existing events
                                calendar.addEventSource(events); // Add updated events
                                calendar.refetchEvents();
                            }
                            else {
                                
                                $('#eventModal').modal('hide');

                                const events = response.map(event => ({
                                    id: event.id,
                                    resourceId: event.resourceId,
                                    title: event.title,
                                    start: event.start,
                                    end: event.end,
                                    eventBackgroundColor: event.status == 0 ? '#e39de8' : '#32d97d',
                                    color: event.status == 0 ? '#e39de8' : '#32d97d',
                                    ShiftDetailId: event.ShiftDetailId,
                                    region: event.region,
                                    status: event.status
                                }));
                                calendar.removeAllEvents(); // Remove existing events
                                calendar.addEventSource(events); // Add updated events
                                calendar.refetchEvents(); // Refetch events from the event sources

                                // Hide the save button and show the edit button
                                $('#savebtn').addClass('d-none');
                                $('#editbtn').removeClass('d-none');
                            }
                        },
                        error: function (xhr, status, error) {
                            // Handle error
                            console.log(xhr);
                            console.log(status);
                            console.log(error);
                        }
                    });
                },
                eventClick: function (info) {
                    // Get the ShiftDetailId from the event's extendedProps
                    var shiftDetailId = info.event.extendedProps.ShiftDetailId;
                    var region = info.event.extendedProps.region;

                    // Populate modal content with event details
                    var event = info.event;
                    var modalBody = document.querySelector('#eventModal .modal-body');
                    var eventDetails = `
                                            <form asp-action="viewshift">
                                            <input class="d-none" id="shiftDetailId" value="${shiftDetailId}">
                                               <div class="form-floating mb-3 mt-3">
                                        <select class="form-control" aria-label="Default select example" id="selectregion" disabled>
                                            <option value="">${region[0].Name}</option>

                                        </select>
                                            <label>Region</label>
                                    </div>
                                            <div class="form-floating mb-3 mt-3">
                                                            <select class="form-select pt-4 physicianDropdown" asp-for="Physicianid" id="physicianSelect" aria-label="Default select example" disabled>
                                                            <option value="" selected disabled>${event.title}</option>
                                                        </select>
                                                            <label>Physician</label>
                                                    </div>
                                                            <div class="col-md-12 form-floating mb-3">
                                                    <input id="StartDateView" class="form-control rounded vcs" name="Startdate" type="date" placeholder="Suchtext" autocomplete="off" min="@DateTime.Now.Date.ToString("yyyy-MM-dd")" value="${formatDate(event.start)}" disabled>
                                    <label for="StartDate">Shifted Date</label>
                                    <div class="d-flex gap-2 mt-3">
                                    <div class="col-md-6 form-floating mb-3">
                                            <input id="StartTimeView" asp-for="Starttime" disabled class="form-control rounded vcs" name="Starttime" type="time" placeholder="Suchtext" autocomplete="off" value="${formatTime(event.start)}" >
                                    <label for="StartTime">Start</label>
                                </div>
                                <div class="col-md-6 form-floating mb-3">
                                            <input id="EndTimeView" asp-for="Endtime" disabled	 class="form-control rounded vcs" name="Endtime" type="time" placeholder="Suchtext" autocomplete="off" value="${formatTime(event.end)}" >
                                    <label for="EndTime">End</label>
                                </div>
                                </div>
                                    <div class="d-flex justify-content-end gap-2">
                                <button class="btn btn-info" id="returnshift"  type="button">Return</button>
                            <button class="btn btn-info" id="editbtn" type="button">Edit</button>
                                <button class="btn btn-success d-none" id="savebtn"  type="button">Save</button>
                            <button class="btn btn-danger" id="deletebtn" type="button">Delete</button>
                        </div>
                                </form>
                                                `;
                    modalBody.innerHTML = eventDetails;
                    // Open the modal when an event is clicked
                    $('#eventModal').modal('show');
                    $('#eventModal').on('click', '#editbtn', function () {
                        // Hide the edit button
                        $('#editbtn').addClass('d-none');
                        // Show the save button
                        $('#savebtn').removeClass('d-none');
                        $('#StartDateView').prop('disabled', false);
                        $('#StartTimeView').prop('disabled', false);
                        $('#EndTimeView').prop('disabled', false);
                    });
                },
                eventBackgroundColor: function (event) {
                    return event.eventBackgroundColor;
                },
                resourceLabelDidMount: function (resourceObj) {
                    const img = document.createElement('img');
                    const imgUrl = resourceObj.resource.extendedProps.imageUrl || `/documents/Physician/${resourceObj.el.dataset.resourceId}/photo.png`;
                    img.src = imgUrl;
                    img.style.maxHeight = '40px';
                    img.style.float = 'left';
                    img.style.clear = 'right';
                    resourceObj.el.querySelector('.fc-datagrid-cell-main').appendChild(img);
                },
                dateClick: function (info) {
                    var shiftedDateISO = info.dateStr;
                    var shiftedDate = shiftedDateISO.split('T')[0];
                    var startTime = new Date(info.date).toISOString().substr(11, 5);

                    $('#StartDate').val(shiftedDate);
                    $('#StartTime').val(startTime);

                    // Open the create shift modal
                    $('#createShiftModal').modal('show');
                },
            });

            function switchView() {
                if (window.screen.width < 700) {
                    if (calendar.view.type === 'resourceTimelineWeek') {
                        calendar.changeView('dayGridWeek');
                    }
                    if (calendar.view.type === 'resourceTimelineDay') {
                        $('.fc-daygrid-day-events').text("0/24");
                        calendar.changeView('timeGridDay');
                    }
                } else {
                    if (calendar.view.type === 'dayGridWeek') {
                        calendar.changeView('resourceTimelineWeek');
                    }
                    if (calendar.view.type === 'timeGridDay') {
                        calendar.changeView('resourceTimelineDay');
                    }
                }
            }
            switchView();
            window.addEventListener('resize', switchView);

            calendar.render();
        }
    });

</script>


<partial name="CreateShiftPartial"></partial>

<div class="modal fade" id="eventModal" tabindex="-1" aria-labelledby="eventModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-info">
                <h5 class="modal-title" id="eventModalLabel">Event Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
            </div>

        </div>
    </div>
</div>
<script>
    var provider = document.getElementById("providers-tab").classList.add("active");

   
    // Function to format date to YYYY-MM-DD
    function formatDate(dateString) {

        const date = new Date(dateString);
        const year = date.getFullYear();
        let month = (date.getMonth() + 1).toString().padStart(2, '0');
        let day = date.getDate().toString().padStart(2, '0');
        return `${year}-${month}-${day}`;
    }
</script>
<script>
    // Function to format time to HH:mm
    function formatTime(dateString) {
        const date = new Date(dateString);
        let hours = date.getHours().toString().padStart(2, '0');
        let minutes = date.getMinutes().toString().padStart(2, '0');
        return `${hours}:${minutes}`;
    }

    $('#eventModal').on('click', '#returnshift', function () {

        // Get the ShiftDetailId from the event
        var shiftDetailId = $('#shiftDetailId').val(); // Assuming you have an input field with id 'shiftDetailId' in your modal
        // Call AJAX to return
        $.ajax({
            url: '/AdminDashboard/ReturnShift',
            type: 'POST',
            data: { shiftDetailId: shiftDetailId },
            success: function (response) {
                // Handle success

                $('#eventModal').modal('hide');

                const events = response.map(event => ({
                    id: event.id,
                    resourceId: event.resourceId,
                    title: event.title,
                    start: event.start,
                    end: event.end,
                    eventBackgroundColor: event.status == 0 ? '#e39de8' : '#32d97d',
                    color: event.status == 0 ? '#e39de8' : '#32d97d',
                    ShiftDetailId: event.ShiftDetailId,
                    status: event.status,
                    region: event.region,
                }));
                calendar.removeAllEvents(); // Remove existing events
                calendar.addEventSource(events); // Add updated events
                calendar.refetchEvents(); // Refetch events from the event sources

            },
            error: function (xhr, status, error) {
                console.log(xhr);
                console.log(status);
                console.log(error);
            }
        });
    });

    $('#eventModal').on('click', '#deletebtn', function () {
        // Get the ShiftId from the event

        var shiftDetailId = $('#shiftDetailId').val();
        $.ajax({
            url: '/AdminDashboard/DeleteShift',
            type: 'POST',
            data: { shiftDetailId: shiftDetailId },
            success: function (response) {
                $('#eventModal').modal('hide');

                const events = response.map(event => ({
                    id: event.id,
                    resourceId: event.resourceId,
                    title: event.title,
                    start: event.start,
                    end: event.end,
                    eventBackgroundColor: event.status == 0 ? '#e39de8' : '#32d97d',
                    color: event.status == 0 ? '#e39de8' : '#32d97d',
                    ShiftDetailId: event.ShiftDetailId,
                    region: event.region,
                    status: event.status
                }));
                calendar.removeAllEvents(); // Remove existing events
                calendar.addEventSource(events); // Add updated events
                calendar.refetchEvents(); // Refetch events from the event sources
            },
            error: function (xhr, status, error) {
                // Handle error
            }
        });
    });

    $('#eventModal').on('click', '#savebtn', function () {
        // Get data to be saved
        var shiftDetailId = $('#shiftDetailId').val(); // Assuming you have an input field with id 'shiftDetailId' in your modal
        var startDate = $('#StartDateView').val();
        var startTime = $('#StartTimeView').val();
        var endTime = $('#EndTimeView').val();
        // Call AJAX to save
        $.ajax({
            url: '/AdminDashboard/SaveShift',
            type: 'POST',
            data: {
                shiftDetailId: shiftDetailId,
                startDate: startDate,
                startTime: startTime,
                endTime: endTime
            },
            success: function (response) {
                if (response.error) {
                    Swal.fire({
                        title: "Oops...",
                        text: "Slot not available",
                        icon: "error",
                        showConfirmButton: false,
                        timer: 1500
                    });
                }
                else {
                    $('#eventModal').modal('hide');

                    const events = response.map(event => ({
                        id: event.id,
                        resourceId: event.resourceId,
                        title: event.title,
                        start: event.start,
                        end: event.end,
                        eventBackgroundColor: event.status == 0 ? '#e39de8' : '#32d97d',
                        color: event.status == 0 ? '#e39de8' : '#32d97d',
                        ShiftDetailId: event.ShiftDetailId,
                        region: event.region,
                        status: event.status
                    }));
                    calendar.removeAllEvents(); // Remove existing events
                    calendar.addEventSource(events); // Add updated events
                    calendar.refetchEvents(); // Refetch events from the event sources

                    // Hide the save button and show the edit button
                    $('#savebtn').addClass('d-none');
                    $('#editbtn').removeClass('d-none');
                }
            },
            error: function (xhr, status, error) {
                // Handle error
                console.log(xhr);
                console.log(status);
                console.log(error);
            }
        });
    });

    $('#providerOnCall').click(function () {
        $('#schedulingDiv').load("/AdminDashboard/ProviderOnCall");
    })

    $('#shiftForReview').click(function () {
        $('#schedulingDiv').load("/AdminDashboard/ShiftForReview");
    })
</script>